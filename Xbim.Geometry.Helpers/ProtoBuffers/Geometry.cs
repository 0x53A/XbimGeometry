// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xbim.Geometry.ProtoBuffer {

  /// <summary>Holder for reflection information generated from geometry.proto</summary>
  public static partial class GeometryReflection {

    #region Descriptor
    /// <summary>File descriptor for geometry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeometryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5nZW9tZXRyeS5wcm90bxINc2hhcGVnZW9tZXRyeSL4CAoQU2hhcGVHZW9t",
            "ZXRyeURUTxJBCgpJZmNWZXJzaW9uGAEgASgOMi0uc2hhcGVnZW9tZXRyeS5T",
            "aGFwZUdlb21ldHJ5RFRPLlNjaGVtYVZlcnNpb24SEgoKR2VvbWV0cnlJZBgC",
            "IAEoBRIXCg9FbnRpdHlWYXJpYW50SWQYAyABKAUSGwoTUm9vdElmY0dlb21l",
            "dHJ5VHlwZRgEIAEoCRJFCgxNb2RlbEZhY3RvcnMYBSABKAsyLy5zaGFwZWdl",
            "b21ldHJ5LlNoYXBlR2VvbWV0cnlEVE8uTW9kZWxmYWN0b3JzRFRPEh0KFUlm",
            "Y0dlb21ldHJ5RGVmaW5pdGlvbhgGIAEoCRIXCg9TaGFwZU1hdGVyaWFsSWQY",
            "ByABKAUSQgoNVm9pZGluZ1NoYXBlcxgIIAMoCzIrLnNoYXBlZ2VvbWV0cnku",
            "U2hhcGVHZW9tZXRyeURUTy5TaGFwZU1hcERUTxrtAQoPTW9kZWxmYWN0b3Jz",
            "RFRPEhUKDU9uZU1pbGxpTWV0ZXIYASABKAESEQoJUHJlY2lzaW9uGAIgASgB",
            "EhQKDFByZWNpc2lvbk1heBgDIAEoARIfChdQcm9maWxlRGVmTGV2ZWxPZkRl",
            "dGFpbBgEIAEoBRImCh5BbmdsZVRvUmFkaWFuc0NvbnZlcnNpb25GYWN0b3IY",
            "BSABKAESFwoPRGVmbGVjdGlvbkFuZ2xlGAYgASgBEhsKE0RlZmxlY3Rpb25U",
            "b2xlcmFuY2UYByABKAESGwoTTWF4QlJlcFNld0ZhY2VDb3VudBgIIAEoBRrp",
            "AQoLTWF0cml4M2REVE8SCwoDTTExGAEgASgBEgsKA00xMhgCIAEoARILCgNN",
            "MTMYAyABKAESCwoDTTE0GAQgASgBEgsKA00yMRgFIAEoARILCgNNMjIYBiAB",
            "KAESCwoDTTIzGAcgASgBEgsKA00yNBgIIAEoARILCgNNMzEYCSABKAESCwoD",
            "TTMyGAogASgBEgsKA00zMxgLIAEoARILCgNNMzQYDCABKAESDwoHT2Zmc2V0",
            "WBgNIAEoARIPCgdPZmZzZXRZGA4gASgBEg8KB09mZnNldFoYDyABKAESCwoD",
            "TTQ0GBAgASgBGoECCgtTaGFwZU1hcERUTxITCgtWb2lkU2hhcGVJZBgBIAEo",
            "BRI+CglUcmFuc2Zvcm0YAiABKAsyKy5zaGFwZWdlb21ldHJ5LlNoYXBlR2Vv",
            "bWV0cnlEVE8uTWF0cml4M2REVE8SPgoJUGxhY2VtZW50GAMgASgLMisuc2hh",
            "cGVnZW9tZXRyeS5TaGFwZUdlb21ldHJ5RFRPLk1hdHJpeDNkRFRPEhcKD1Zv",
            "aWRHZW9tZXRyeUlkcxgEIAMoBRJECg9OZXN0ZWRTaGFwZU1hcHMYBSADKAsy",
            "Ky5zaGFwZWdlb21ldHJ5LlNoYXBlR2VvbWV0cnlEVE8uU2hhcGVNYXBEVE8i",
            "NAoNU2NoZW1hVmVyc2lvbhINCglVbmRlZmluZWQQABIKCgZJZmMyWDMQARII",
            "CgRJZmM0EAJCHKoCGVhiaW0uR2VvbWV0cnkuUHJvdG9CdWZmZXJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO), global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Parser, new[]{ "IfcVersion", "GeometryId", "EntityVariantId", "RootIfcGeometryType", "ModelFactors", "IfcGeometryDefinition", "ShapeMaterialId", "VoidingShapes" }, null, new[]{ typeof(global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.SchemaVersion) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ModelfactorsDTO), global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ModelfactorsDTO.Parser, new[]{ "OneMilliMeter", "Precision", "PrecisionMax", "ProfileDefLevelOfDetail", "AngleToRadiansConversionFactor", "DeflectionAngle", "DeflectionTolerance", "MaxBRepSewFaceCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO), global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO.Parser, new[]{ "M11", "M12", "M13", "M14", "M21", "M22", "M23", "M24", "M31", "M32", "M33", "M34", "OffsetX", "OffsetY", "OffsetZ", "M44" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO), global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO.Parser, new[]{ "VoidShapeId", "Transform", "Placement", "VoidGeometryIds", "NestedShapeMaps" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ShapeGeometryDTO : pb::IMessage<ShapeGeometryDTO> {
    private static readonly pb::MessageParser<ShapeGeometryDTO> _parser = new pb::MessageParser<ShapeGeometryDTO>(() => new ShapeGeometryDTO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeGeometryDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xbim.Geometry.ProtoBuffer.GeometryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeGeometryDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeGeometryDTO(ShapeGeometryDTO other) : this() {
      ifcVersion_ = other.ifcVersion_;
      geometryId_ = other.geometryId_;
      entityVariantId_ = other.entityVariantId_;
      rootIfcGeometryType_ = other.rootIfcGeometryType_;
      ModelFactors = other.modelFactors_ != null ? other.ModelFactors.Clone() : null;
      ifcGeometryDefinition_ = other.ifcGeometryDefinition_;
      shapeMaterialId_ = other.shapeMaterialId_;
      voidingShapes_ = other.voidingShapes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeGeometryDTO Clone() {
      return new ShapeGeometryDTO(this);
    }

    /// <summary>Field number for the "IfcVersion" field.</summary>
    public const int IfcVersionFieldNumber = 1;
    private global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.SchemaVersion ifcVersion_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.SchemaVersion IfcVersion {
      get { return ifcVersion_; }
      set {
        ifcVersion_ = value;
      }
    }

    /// <summary>Field number for the "GeometryId" field.</summary>
    public const int GeometryIdFieldNumber = 2;
    private int geometryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GeometryId {
      get { return geometryId_; }
      set {
        geometryId_ = value;
      }
    }

    /// <summary>Field number for the "EntityVariantId" field.</summary>
    public const int EntityVariantIdFieldNumber = 3;
    private int entityVariantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityVariantId {
      get { return entityVariantId_; }
      set {
        entityVariantId_ = value;
      }
    }

    /// <summary>Field number for the "RootIfcGeometryType" field.</summary>
    public const int RootIfcGeometryTypeFieldNumber = 4;
    private string rootIfcGeometryType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootIfcGeometryType {
      get { return rootIfcGeometryType_; }
      set {
        rootIfcGeometryType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModelFactors" field.</summary>
    public const int ModelFactorsFieldNumber = 5;
    private global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ModelfactorsDTO modelFactors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ModelfactorsDTO ModelFactors {
      get { return modelFactors_; }
      set {
        modelFactors_ = value;
      }
    }

    /// <summary>Field number for the "IfcGeometryDefinition" field.</summary>
    public const int IfcGeometryDefinitionFieldNumber = 6;
    private string ifcGeometryDefinition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IfcGeometryDefinition {
      get { return ifcGeometryDefinition_; }
      set {
        ifcGeometryDefinition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShapeMaterialId" field.</summary>
    public const int ShapeMaterialIdFieldNumber = 7;
    private int shapeMaterialId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShapeMaterialId {
      get { return shapeMaterialId_; }
      set {
        shapeMaterialId_ = value;
      }
    }

    /// <summary>Field number for the "VoidingShapes" field.</summary>
    public const int VoidingShapesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO> _repeated_voidingShapes_codec
        = pb::FieldCodec.ForMessage(66, global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO.Parser);
    private readonly pbc::RepeatedField<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO> voidingShapes_ = new pbc::RepeatedField<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO> VoidingShapes {
      get { return voidingShapes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShapeGeometryDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShapeGeometryDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IfcVersion != other.IfcVersion) return false;
      if (GeometryId != other.GeometryId) return false;
      if (EntityVariantId != other.EntityVariantId) return false;
      if (RootIfcGeometryType != other.RootIfcGeometryType) return false;
      if (!object.Equals(ModelFactors, other.ModelFactors)) return false;
      if (IfcGeometryDefinition != other.IfcGeometryDefinition) return false;
      if (ShapeMaterialId != other.ShapeMaterialId) return false;
      if(!voidingShapes_.Equals(other.voidingShapes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IfcVersion != 0) hash ^= IfcVersion.GetHashCode();
      if (GeometryId != 0) hash ^= GeometryId.GetHashCode();
      if (EntityVariantId != 0) hash ^= EntityVariantId.GetHashCode();
      if (RootIfcGeometryType.Length != 0) hash ^= RootIfcGeometryType.GetHashCode();
      if (modelFactors_ != null) hash ^= ModelFactors.GetHashCode();
      if (IfcGeometryDefinition.Length != 0) hash ^= IfcGeometryDefinition.GetHashCode();
      if (ShapeMaterialId != 0) hash ^= ShapeMaterialId.GetHashCode();
      hash ^= voidingShapes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IfcVersion != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IfcVersion);
      }
      if (GeometryId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GeometryId);
      }
      if (EntityVariantId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EntityVariantId);
      }
      if (RootIfcGeometryType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RootIfcGeometryType);
      }
      if (modelFactors_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ModelFactors);
      }
      if (IfcGeometryDefinition.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IfcGeometryDefinition);
      }
      if (ShapeMaterialId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ShapeMaterialId);
      }
      voidingShapes_.WriteTo(output, _repeated_voidingShapes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IfcVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IfcVersion);
      }
      if (GeometryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GeometryId);
      }
      if (EntityVariantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityVariantId);
      }
      if (RootIfcGeometryType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootIfcGeometryType);
      }
      if (modelFactors_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelFactors);
      }
      if (IfcGeometryDefinition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IfcGeometryDefinition);
      }
      if (ShapeMaterialId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShapeMaterialId);
      }
      size += voidingShapes_.CalculateSize(_repeated_voidingShapes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShapeGeometryDTO other) {
      if (other == null) {
        return;
      }
      if (other.IfcVersion != 0) {
        IfcVersion = other.IfcVersion;
      }
      if (other.GeometryId != 0) {
        GeometryId = other.GeometryId;
      }
      if (other.EntityVariantId != 0) {
        EntityVariantId = other.EntityVariantId;
      }
      if (other.RootIfcGeometryType.Length != 0) {
        RootIfcGeometryType = other.RootIfcGeometryType;
      }
      if (other.modelFactors_ != null) {
        if (modelFactors_ == null) {
          modelFactors_ = new global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ModelfactorsDTO();
        }
        ModelFactors.MergeFrom(other.ModelFactors);
      }
      if (other.IfcGeometryDefinition.Length != 0) {
        IfcGeometryDefinition = other.IfcGeometryDefinition;
      }
      if (other.ShapeMaterialId != 0) {
        ShapeMaterialId = other.ShapeMaterialId;
      }
      voidingShapes_.Add(other.voidingShapes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ifcVersion_ = (global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.SchemaVersion) input.ReadEnum();
            break;
          }
          case 16: {
            GeometryId = input.ReadInt32();
            break;
          }
          case 24: {
            EntityVariantId = input.ReadInt32();
            break;
          }
          case 34: {
            RootIfcGeometryType = input.ReadString();
            break;
          }
          case 42: {
            if (modelFactors_ == null) {
              modelFactors_ = new global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ModelfactorsDTO();
            }
            input.ReadMessage(modelFactors_);
            break;
          }
          case 50: {
            IfcGeometryDefinition = input.ReadString();
            break;
          }
          case 56: {
            ShapeMaterialId = input.ReadInt32();
            break;
          }
          case 66: {
            voidingShapes_.AddEntriesFrom(input, _repeated_voidingShapes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ShapeGeometryDTO message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SchemaVersion {
        [pbr::OriginalName("Undefined")] Undefined = 0,
        [pbr::OriginalName("Ifc2X3")] Ifc2X3 = 1,
        [pbr::OriginalName("Ifc4")] Ifc4 = 2,
      }

      public sealed partial class ModelfactorsDTO : pb::IMessage<ModelfactorsDTO> {
        private static readonly pb::MessageParser<ModelfactorsDTO> _parser = new pb::MessageParser<ModelfactorsDTO>(() => new ModelfactorsDTO());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ModelfactorsDTO> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelfactorsDTO() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelfactorsDTO(ModelfactorsDTO other) : this() {
          oneMilliMeter_ = other.oneMilliMeter_;
          precision_ = other.precision_;
          precisionMax_ = other.precisionMax_;
          profileDefLevelOfDetail_ = other.profileDefLevelOfDetail_;
          angleToRadiansConversionFactor_ = other.angleToRadiansConversionFactor_;
          deflectionAngle_ = other.deflectionAngle_;
          deflectionTolerance_ = other.deflectionTolerance_;
          maxBRepSewFaceCount_ = other.maxBRepSewFaceCount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModelfactorsDTO Clone() {
          return new ModelfactorsDTO(this);
        }

        /// <summary>Field number for the "OneMilliMeter" field.</summary>
        public const int OneMilliMeterFieldNumber = 1;
        private double oneMilliMeter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double OneMilliMeter {
          get { return oneMilliMeter_; }
          set {
            oneMilliMeter_ = value;
          }
        }

        /// <summary>Field number for the "Precision" field.</summary>
        public const int PrecisionFieldNumber = 2;
        private double precision_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Precision {
          get { return precision_; }
          set {
            precision_ = value;
          }
        }

        /// <summary>Field number for the "PrecisionMax" field.</summary>
        public const int PrecisionMaxFieldNumber = 3;
        private double precisionMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PrecisionMax {
          get { return precisionMax_; }
          set {
            precisionMax_ = value;
          }
        }

        /// <summary>Field number for the "ProfileDefLevelOfDetail" field.</summary>
        public const int ProfileDefLevelOfDetailFieldNumber = 4;
        private int profileDefLevelOfDetail_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ProfileDefLevelOfDetail {
          get { return profileDefLevelOfDetail_; }
          set {
            profileDefLevelOfDetail_ = value;
          }
        }

        /// <summary>Field number for the "AngleToRadiansConversionFactor" field.</summary>
        public const int AngleToRadiansConversionFactorFieldNumber = 5;
        private double angleToRadiansConversionFactor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AngleToRadiansConversionFactor {
          get { return angleToRadiansConversionFactor_; }
          set {
            angleToRadiansConversionFactor_ = value;
          }
        }

        /// <summary>Field number for the "DeflectionAngle" field.</summary>
        public const int DeflectionAngleFieldNumber = 6;
        private double deflectionAngle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double DeflectionAngle {
          get { return deflectionAngle_; }
          set {
            deflectionAngle_ = value;
          }
        }

        /// <summary>Field number for the "DeflectionTolerance" field.</summary>
        public const int DeflectionToleranceFieldNumber = 7;
        private double deflectionTolerance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double DeflectionTolerance {
          get { return deflectionTolerance_; }
          set {
            deflectionTolerance_ = value;
          }
        }

        /// <summary>Field number for the "MaxBRepSewFaceCount" field.</summary>
        public const int MaxBRepSewFaceCountFieldNumber = 8;
        private int maxBRepSewFaceCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxBRepSewFaceCount {
          get { return maxBRepSewFaceCount_; }
          set {
            maxBRepSewFaceCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ModelfactorsDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ModelfactorsDTO other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OneMilliMeter != other.OneMilliMeter) return false;
          if (Precision != other.Precision) return false;
          if (PrecisionMax != other.PrecisionMax) return false;
          if (ProfileDefLevelOfDetail != other.ProfileDefLevelOfDetail) return false;
          if (AngleToRadiansConversionFactor != other.AngleToRadiansConversionFactor) return false;
          if (DeflectionAngle != other.DeflectionAngle) return false;
          if (DeflectionTolerance != other.DeflectionTolerance) return false;
          if (MaxBRepSewFaceCount != other.MaxBRepSewFaceCount) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OneMilliMeter != 0D) hash ^= OneMilliMeter.GetHashCode();
          if (Precision != 0D) hash ^= Precision.GetHashCode();
          if (PrecisionMax != 0D) hash ^= PrecisionMax.GetHashCode();
          if (ProfileDefLevelOfDetail != 0) hash ^= ProfileDefLevelOfDetail.GetHashCode();
          if (AngleToRadiansConversionFactor != 0D) hash ^= AngleToRadiansConversionFactor.GetHashCode();
          if (DeflectionAngle != 0D) hash ^= DeflectionAngle.GetHashCode();
          if (DeflectionTolerance != 0D) hash ^= DeflectionTolerance.GetHashCode();
          if (MaxBRepSewFaceCount != 0) hash ^= MaxBRepSewFaceCount.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OneMilliMeter != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(OneMilliMeter);
          }
          if (Precision != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Precision);
          }
          if (PrecisionMax != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(PrecisionMax);
          }
          if (ProfileDefLevelOfDetail != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ProfileDefLevelOfDetail);
          }
          if (AngleToRadiansConversionFactor != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(AngleToRadiansConversionFactor);
          }
          if (DeflectionAngle != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(DeflectionAngle);
          }
          if (DeflectionTolerance != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(DeflectionTolerance);
          }
          if (MaxBRepSewFaceCount != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(MaxBRepSewFaceCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OneMilliMeter != 0D) {
            size += 1 + 8;
          }
          if (Precision != 0D) {
            size += 1 + 8;
          }
          if (PrecisionMax != 0D) {
            size += 1 + 8;
          }
          if (ProfileDefLevelOfDetail != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProfileDefLevelOfDetail);
          }
          if (AngleToRadiansConversionFactor != 0D) {
            size += 1 + 8;
          }
          if (DeflectionAngle != 0D) {
            size += 1 + 8;
          }
          if (DeflectionTolerance != 0D) {
            size += 1 + 8;
          }
          if (MaxBRepSewFaceCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBRepSewFaceCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ModelfactorsDTO other) {
          if (other == null) {
            return;
          }
          if (other.OneMilliMeter != 0D) {
            OneMilliMeter = other.OneMilliMeter;
          }
          if (other.Precision != 0D) {
            Precision = other.Precision;
          }
          if (other.PrecisionMax != 0D) {
            PrecisionMax = other.PrecisionMax;
          }
          if (other.ProfileDefLevelOfDetail != 0) {
            ProfileDefLevelOfDetail = other.ProfileDefLevelOfDetail;
          }
          if (other.AngleToRadiansConversionFactor != 0D) {
            AngleToRadiansConversionFactor = other.AngleToRadiansConversionFactor;
          }
          if (other.DeflectionAngle != 0D) {
            DeflectionAngle = other.DeflectionAngle;
          }
          if (other.DeflectionTolerance != 0D) {
            DeflectionTolerance = other.DeflectionTolerance;
          }
          if (other.MaxBRepSewFaceCount != 0) {
            MaxBRepSewFaceCount = other.MaxBRepSewFaceCount;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                OneMilliMeter = input.ReadDouble();
                break;
              }
              case 17: {
                Precision = input.ReadDouble();
                break;
              }
              case 25: {
                PrecisionMax = input.ReadDouble();
                break;
              }
              case 32: {
                ProfileDefLevelOfDetail = input.ReadInt32();
                break;
              }
              case 41: {
                AngleToRadiansConversionFactor = input.ReadDouble();
                break;
              }
              case 49: {
                DeflectionAngle = input.ReadDouble();
                break;
              }
              case 57: {
                DeflectionTolerance = input.ReadDouble();
                break;
              }
              case 64: {
                MaxBRepSewFaceCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Matrix3dDTO : pb::IMessage<Matrix3dDTO> {
        private static readonly pb::MessageParser<Matrix3dDTO> _parser = new pb::MessageParser<Matrix3dDTO>(() => new Matrix3dDTO());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Matrix3dDTO> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Matrix3dDTO() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Matrix3dDTO(Matrix3dDTO other) : this() {
          m11_ = other.m11_;
          m12_ = other.m12_;
          m13_ = other.m13_;
          m14_ = other.m14_;
          m21_ = other.m21_;
          m22_ = other.m22_;
          m23_ = other.m23_;
          m24_ = other.m24_;
          m31_ = other.m31_;
          m32_ = other.m32_;
          m33_ = other.m33_;
          m34_ = other.m34_;
          offsetX_ = other.offsetX_;
          offsetY_ = other.offsetY_;
          offsetZ_ = other.offsetZ_;
          m44_ = other.m44_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Matrix3dDTO Clone() {
          return new Matrix3dDTO(this);
        }

        /// <summary>Field number for the "M11" field.</summary>
        public const int M11FieldNumber = 1;
        private double m11_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M11 {
          get { return m11_; }
          set {
            m11_ = value;
          }
        }

        /// <summary>Field number for the "M12" field.</summary>
        public const int M12FieldNumber = 2;
        private double m12_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M12 {
          get { return m12_; }
          set {
            m12_ = value;
          }
        }

        /// <summary>Field number for the "M13" field.</summary>
        public const int M13FieldNumber = 3;
        private double m13_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M13 {
          get { return m13_; }
          set {
            m13_ = value;
          }
        }

        /// <summary>Field number for the "M14" field.</summary>
        public const int M14FieldNumber = 4;
        private double m14_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M14 {
          get { return m14_; }
          set {
            m14_ = value;
          }
        }

        /// <summary>Field number for the "M21" field.</summary>
        public const int M21FieldNumber = 5;
        private double m21_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M21 {
          get { return m21_; }
          set {
            m21_ = value;
          }
        }

        /// <summary>Field number for the "M22" field.</summary>
        public const int M22FieldNumber = 6;
        private double m22_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M22 {
          get { return m22_; }
          set {
            m22_ = value;
          }
        }

        /// <summary>Field number for the "M23" field.</summary>
        public const int M23FieldNumber = 7;
        private double m23_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M23 {
          get { return m23_; }
          set {
            m23_ = value;
          }
        }

        /// <summary>Field number for the "M24" field.</summary>
        public const int M24FieldNumber = 8;
        private double m24_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M24 {
          get { return m24_; }
          set {
            m24_ = value;
          }
        }

        /// <summary>Field number for the "M31" field.</summary>
        public const int M31FieldNumber = 9;
        private double m31_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M31 {
          get { return m31_; }
          set {
            m31_ = value;
          }
        }

        /// <summary>Field number for the "M32" field.</summary>
        public const int M32FieldNumber = 10;
        private double m32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M32 {
          get { return m32_; }
          set {
            m32_ = value;
          }
        }

        /// <summary>Field number for the "M33" field.</summary>
        public const int M33FieldNumber = 11;
        private double m33_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M33 {
          get { return m33_; }
          set {
            m33_ = value;
          }
        }

        /// <summary>Field number for the "M34" field.</summary>
        public const int M34FieldNumber = 12;
        private double m34_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M34 {
          get { return m34_; }
          set {
            m34_ = value;
          }
        }

        /// <summary>Field number for the "OffsetX" field.</summary>
        public const int OffsetXFieldNumber = 13;
        private double offsetX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double OffsetX {
          get { return offsetX_; }
          set {
            offsetX_ = value;
          }
        }

        /// <summary>Field number for the "OffsetY" field.</summary>
        public const int OffsetYFieldNumber = 14;
        private double offsetY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double OffsetY {
          get { return offsetY_; }
          set {
            offsetY_ = value;
          }
        }

        /// <summary>Field number for the "OffsetZ" field.</summary>
        public const int OffsetZFieldNumber = 15;
        private double offsetZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double OffsetZ {
          get { return offsetZ_; }
          set {
            offsetZ_ = value;
          }
        }

        /// <summary>Field number for the "M44" field.</summary>
        public const int M44FieldNumber = 16;
        private double m44_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double M44 {
          get { return m44_; }
          set {
            m44_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Matrix3dDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Matrix3dDTO other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (M11 != other.M11) return false;
          if (M12 != other.M12) return false;
          if (M13 != other.M13) return false;
          if (M14 != other.M14) return false;
          if (M21 != other.M21) return false;
          if (M22 != other.M22) return false;
          if (M23 != other.M23) return false;
          if (M24 != other.M24) return false;
          if (M31 != other.M31) return false;
          if (M32 != other.M32) return false;
          if (M33 != other.M33) return false;
          if (M34 != other.M34) return false;
          if (OffsetX != other.OffsetX) return false;
          if (OffsetY != other.OffsetY) return false;
          if (OffsetZ != other.OffsetZ) return false;
          if (M44 != other.M44) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (M11 != 0D) hash ^= M11.GetHashCode();
          if (M12 != 0D) hash ^= M12.GetHashCode();
          if (M13 != 0D) hash ^= M13.GetHashCode();
          if (M14 != 0D) hash ^= M14.GetHashCode();
          if (M21 != 0D) hash ^= M21.GetHashCode();
          if (M22 != 0D) hash ^= M22.GetHashCode();
          if (M23 != 0D) hash ^= M23.GetHashCode();
          if (M24 != 0D) hash ^= M24.GetHashCode();
          if (M31 != 0D) hash ^= M31.GetHashCode();
          if (M32 != 0D) hash ^= M32.GetHashCode();
          if (M33 != 0D) hash ^= M33.GetHashCode();
          if (M34 != 0D) hash ^= M34.GetHashCode();
          if (OffsetX != 0D) hash ^= OffsetX.GetHashCode();
          if (OffsetY != 0D) hash ^= OffsetY.GetHashCode();
          if (OffsetZ != 0D) hash ^= OffsetZ.GetHashCode();
          if (M44 != 0D) hash ^= M44.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (M11 != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(M11);
          }
          if (M12 != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(M12);
          }
          if (M13 != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(M13);
          }
          if (M14 != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(M14);
          }
          if (M21 != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(M21);
          }
          if (M22 != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(M22);
          }
          if (M23 != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(M23);
          }
          if (M24 != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(M24);
          }
          if (M31 != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(M31);
          }
          if (M32 != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(M32);
          }
          if (M33 != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(M33);
          }
          if (M34 != 0D) {
            output.WriteRawTag(97);
            output.WriteDouble(M34);
          }
          if (OffsetX != 0D) {
            output.WriteRawTag(105);
            output.WriteDouble(OffsetX);
          }
          if (OffsetY != 0D) {
            output.WriteRawTag(113);
            output.WriteDouble(OffsetY);
          }
          if (OffsetZ != 0D) {
            output.WriteRawTag(121);
            output.WriteDouble(OffsetZ);
          }
          if (M44 != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(M44);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (M11 != 0D) {
            size += 1 + 8;
          }
          if (M12 != 0D) {
            size += 1 + 8;
          }
          if (M13 != 0D) {
            size += 1 + 8;
          }
          if (M14 != 0D) {
            size += 1 + 8;
          }
          if (M21 != 0D) {
            size += 1 + 8;
          }
          if (M22 != 0D) {
            size += 1 + 8;
          }
          if (M23 != 0D) {
            size += 1 + 8;
          }
          if (M24 != 0D) {
            size += 1 + 8;
          }
          if (M31 != 0D) {
            size += 1 + 8;
          }
          if (M32 != 0D) {
            size += 1 + 8;
          }
          if (M33 != 0D) {
            size += 1 + 8;
          }
          if (M34 != 0D) {
            size += 1 + 8;
          }
          if (OffsetX != 0D) {
            size += 1 + 8;
          }
          if (OffsetY != 0D) {
            size += 1 + 8;
          }
          if (OffsetZ != 0D) {
            size += 1 + 8;
          }
          if (M44 != 0D) {
            size += 2 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Matrix3dDTO other) {
          if (other == null) {
            return;
          }
          if (other.M11 != 0D) {
            M11 = other.M11;
          }
          if (other.M12 != 0D) {
            M12 = other.M12;
          }
          if (other.M13 != 0D) {
            M13 = other.M13;
          }
          if (other.M14 != 0D) {
            M14 = other.M14;
          }
          if (other.M21 != 0D) {
            M21 = other.M21;
          }
          if (other.M22 != 0D) {
            M22 = other.M22;
          }
          if (other.M23 != 0D) {
            M23 = other.M23;
          }
          if (other.M24 != 0D) {
            M24 = other.M24;
          }
          if (other.M31 != 0D) {
            M31 = other.M31;
          }
          if (other.M32 != 0D) {
            M32 = other.M32;
          }
          if (other.M33 != 0D) {
            M33 = other.M33;
          }
          if (other.M34 != 0D) {
            M34 = other.M34;
          }
          if (other.OffsetX != 0D) {
            OffsetX = other.OffsetX;
          }
          if (other.OffsetY != 0D) {
            OffsetY = other.OffsetY;
          }
          if (other.OffsetZ != 0D) {
            OffsetZ = other.OffsetZ;
          }
          if (other.M44 != 0D) {
            M44 = other.M44;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                M11 = input.ReadDouble();
                break;
              }
              case 17: {
                M12 = input.ReadDouble();
                break;
              }
              case 25: {
                M13 = input.ReadDouble();
                break;
              }
              case 33: {
                M14 = input.ReadDouble();
                break;
              }
              case 41: {
                M21 = input.ReadDouble();
                break;
              }
              case 49: {
                M22 = input.ReadDouble();
                break;
              }
              case 57: {
                M23 = input.ReadDouble();
                break;
              }
              case 65: {
                M24 = input.ReadDouble();
                break;
              }
              case 73: {
                M31 = input.ReadDouble();
                break;
              }
              case 81: {
                M32 = input.ReadDouble();
                break;
              }
              case 89: {
                M33 = input.ReadDouble();
                break;
              }
              case 97: {
                M34 = input.ReadDouble();
                break;
              }
              case 105: {
                OffsetX = input.ReadDouble();
                break;
              }
              case 113: {
                OffsetY = input.ReadDouble();
                break;
              }
              case 121: {
                OffsetZ = input.ReadDouble();
                break;
              }
              case 129: {
                M44 = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ShapeMapDTO : pb::IMessage<ShapeMapDTO> {
        private static readonly pb::MessageParser<ShapeMapDTO> _parser = new pb::MessageParser<ShapeMapDTO>(() => new ShapeMapDTO());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShapeMapDTO> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShapeMapDTO() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShapeMapDTO(ShapeMapDTO other) : this() {
          voidShapeId_ = other.voidShapeId_;
          Transform = other.transform_ != null ? other.Transform.Clone() : null;
          Placement = other.placement_ != null ? other.Placement.Clone() : null;
          voidGeometryIds_ = other.voidGeometryIds_.Clone();
          nestedShapeMaps_ = other.nestedShapeMaps_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShapeMapDTO Clone() {
          return new ShapeMapDTO(this);
        }

        /// <summary>Field number for the "VoidShapeId" field.</summary>
        public const int VoidShapeIdFieldNumber = 1;
        private int voidShapeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int VoidShapeId {
          get { return voidShapeId_; }
          set {
            voidShapeId_ = value;
          }
        }

        /// <summary>Field number for the "Transform" field.</summary>
        public const int TransformFieldNumber = 2;
        private global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO transform_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO Transform {
          get { return transform_; }
          set {
            transform_ = value;
          }
        }

        /// <summary>Field number for the "Placement" field.</summary>
        public const int PlacementFieldNumber = 3;
        private global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO placement_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO Placement {
          get { return placement_; }
          set {
            placement_ = value;
          }
        }

        /// <summary>Field number for the "VoidGeometryIds" field.</summary>
        public const int VoidGeometryIdsFieldNumber = 4;
        private static readonly pb::FieldCodec<int> _repeated_voidGeometryIds_codec
            = pb::FieldCodec.ForInt32(34);
        private readonly pbc::RepeatedField<int> voidGeometryIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> VoidGeometryIds {
          get { return voidGeometryIds_; }
        }

        /// <summary>Field number for the "NestedShapeMaps" field.</summary>
        public const int NestedShapeMapsFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO> _repeated_nestedShapeMaps_codec
            = pb::FieldCodec.ForMessage(42, global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO.Parser);
        private readonly pbc::RepeatedField<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO> nestedShapeMaps_ = new pbc::RepeatedField<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.ShapeMapDTO> NestedShapeMaps {
          get { return nestedShapeMaps_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShapeMapDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShapeMapDTO other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (VoidShapeId != other.VoidShapeId) return false;
          if (!object.Equals(Transform, other.Transform)) return false;
          if (!object.Equals(Placement, other.Placement)) return false;
          if(!voidGeometryIds_.Equals(other.voidGeometryIds_)) return false;
          if(!nestedShapeMaps_.Equals(other.nestedShapeMaps_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (VoidShapeId != 0) hash ^= VoidShapeId.GetHashCode();
          if (transform_ != null) hash ^= Transform.GetHashCode();
          if (placement_ != null) hash ^= Placement.GetHashCode();
          hash ^= voidGeometryIds_.GetHashCode();
          hash ^= nestedShapeMaps_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (VoidShapeId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(VoidShapeId);
          }
          if (transform_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Transform);
          }
          if (placement_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Placement);
          }
          voidGeometryIds_.WriteTo(output, _repeated_voidGeometryIds_codec);
          nestedShapeMaps_.WriteTo(output, _repeated_nestedShapeMaps_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (VoidShapeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoidShapeId);
          }
          if (transform_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
          }
          if (placement_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Placement);
          }
          size += voidGeometryIds_.CalculateSize(_repeated_voidGeometryIds_codec);
          size += nestedShapeMaps_.CalculateSize(_repeated_nestedShapeMaps_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShapeMapDTO other) {
          if (other == null) {
            return;
          }
          if (other.VoidShapeId != 0) {
            VoidShapeId = other.VoidShapeId;
          }
          if (other.transform_ != null) {
            if (transform_ == null) {
              transform_ = new global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO();
            }
            Transform.MergeFrom(other.Transform);
          }
          if (other.placement_ != null) {
            if (placement_ == null) {
              placement_ = new global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO();
            }
            Placement.MergeFrom(other.Placement);
          }
          voidGeometryIds_.Add(other.voidGeometryIds_);
          nestedShapeMaps_.Add(other.nestedShapeMaps_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                VoidShapeId = input.ReadInt32();
                break;
              }
              case 18: {
                if (transform_ == null) {
                  transform_ = new global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO();
                }
                input.ReadMessage(transform_);
                break;
              }
              case 26: {
                if (placement_ == null) {
                  placement_ = new global::Xbim.Geometry.ProtoBuffer.ShapeGeometryDTO.Types.Matrix3dDTO();
                }
                input.ReadMessage(placement_);
                break;
              }
              case 34:
              case 32: {
                voidGeometryIds_.AddEntriesFrom(input, _repeated_voidGeometryIds_codec);
                break;
              }
              case 42: {
                nestedShapeMaps_.AddEntriesFrom(input, _repeated_nestedShapeMaps_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
