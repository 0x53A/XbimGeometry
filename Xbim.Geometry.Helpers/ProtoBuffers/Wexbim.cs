// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WexBim.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xbim.Geometry.ProtoBuffer {

  /// <summary>Holder for reflection information generated from WexBim.proto</summary>
  public static partial class WexBimReflection {

    #region Descriptor
    /// <summary>File descriptor for WexBim.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WexBimReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxXZXhCaW0ucHJvdG8SBndleGJpbSKNAQoOV2V4QmltU2hhcGVEVE8SEgoK",
            "R2VvbWV0cnlJZBgBIAEoBRIXCg9FbnRpdHlWYXJpYW50SWQYAiABKAUSEgoK",
            "TWF0ZXJpYWxJZBgDIAEoBRITCgtCb3VuZGluZ0JveBgEIAEoDBIVCg1Ucmlh",
            "bmd1bGF0aW9uGAUgASgMEg4KBlZvbHVtZRgGIAEoAUIcqgIZWGJpbS5HZW9t",
            "ZXRyeS5Qcm90b0J1ZmZlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xbim.Geometry.ProtoBuffer.WexBimShapeDTO), global::Xbim.Geometry.ProtoBuffer.WexBimShapeDTO.Parser, new[]{ "GeometryId", "EntityVariantId", "MaterialId", "BoundingBox", "Triangulation", "Volume" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WexBimShapeDTO : pb::IMessage<WexBimShapeDTO> {
    private static readonly pb::MessageParser<WexBimShapeDTO> _parser = new pb::MessageParser<WexBimShapeDTO>(() => new WexBimShapeDTO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WexBimShapeDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xbim.Geometry.ProtoBuffer.WexBimReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WexBimShapeDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WexBimShapeDTO(WexBimShapeDTO other) : this() {
      geometryId_ = other.geometryId_;
      entityVariantId_ = other.entityVariantId_;
      materialId_ = other.materialId_;
      boundingBox_ = other.boundingBox_;
      triangulation_ = other.triangulation_;
      volume_ = other.volume_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WexBimShapeDTO Clone() {
      return new WexBimShapeDTO(this);
    }

    /// <summary>Field number for the "GeometryId" field.</summary>
    public const int GeometryIdFieldNumber = 1;
    private int geometryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GeometryId {
      get { return geometryId_; }
      set {
        geometryId_ = value;
      }
    }

    /// <summary>Field number for the "EntityVariantId" field.</summary>
    public const int EntityVariantIdFieldNumber = 2;
    private int entityVariantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityVariantId {
      get { return entityVariantId_; }
      set {
        entityVariantId_ = value;
      }
    }

    /// <summary>Field number for the "MaterialId" field.</summary>
    public const int MaterialIdFieldNumber = 3;
    private int materialId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaterialId {
      get { return materialId_; }
      set {
        materialId_ = value;
      }
    }

    /// <summary>Field number for the "BoundingBox" field.</summary>
    public const int BoundingBoxFieldNumber = 4;
    private pb::ByteString boundingBox_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Triangulation" field.</summary>
    public const int TriangulationFieldNumber = 5;
    private pb::ByteString triangulation_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Triangulation {
      get { return triangulation_; }
      set {
        triangulation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WexBimShapeDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WexBimShapeDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GeometryId != other.GeometryId) return false;
      if (EntityVariantId != other.EntityVariantId) return false;
      if (MaterialId != other.MaterialId) return false;
      if (BoundingBox != other.BoundingBox) return false;
      if (Triangulation != other.Triangulation) return false;
      if (Volume != other.Volume) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GeometryId != 0) hash ^= GeometryId.GetHashCode();
      if (EntityVariantId != 0) hash ^= EntityVariantId.GetHashCode();
      if (MaterialId != 0) hash ^= MaterialId.GetHashCode();
      if (BoundingBox.Length != 0) hash ^= BoundingBox.GetHashCode();
      if (Triangulation.Length != 0) hash ^= Triangulation.GetHashCode();
      if (Volume != 0D) hash ^= Volume.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GeometryId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GeometryId);
      }
      if (EntityVariantId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityVariantId);
      }
      if (MaterialId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaterialId);
      }
      if (BoundingBox.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(BoundingBox);
      }
      if (Triangulation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Triangulation);
      }
      if (Volume != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Volume);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GeometryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GeometryId);
      }
      if (EntityVariantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityVariantId);
      }
      if (MaterialId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaterialId);
      }
      if (BoundingBox.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BoundingBox);
      }
      if (Triangulation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Triangulation);
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WexBimShapeDTO other) {
      if (other == null) {
        return;
      }
      if (other.GeometryId != 0) {
        GeometryId = other.GeometryId;
      }
      if (other.EntityVariantId != 0) {
        EntityVariantId = other.EntityVariantId;
      }
      if (other.MaterialId != 0) {
        MaterialId = other.MaterialId;
      }
      if (other.BoundingBox.Length != 0) {
        BoundingBox = other.BoundingBox;
      }
      if (other.Triangulation.Length != 0) {
        Triangulation = other.Triangulation;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GeometryId = input.ReadInt32();
            break;
          }
          case 16: {
            EntityVariantId = input.ReadInt32();
            break;
          }
          case 24: {
            MaterialId = input.ReadInt32();
            break;
          }
          case 34: {
            BoundingBox = input.ReadBytes();
            break;
          }
          case 42: {
            Triangulation = input.ReadBytes();
            break;
          }
          case 49: {
            Volume = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
