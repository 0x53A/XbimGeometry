variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  major: 5
  minor: 0
  # creates a counter called versioncounter and seeds it at 100 and then assigns the value to a variable named patch.
  patch: $[counter('geomversioncounter', 100)]
  
steps:
# Windows script setting up  $(version) of the nuget package based on branch
- script: |
    echo ##vso[task.setvariable variable=version]$(major).$(minor).$(patch)-prerelease
  name: 'SettingPrereleaseNugetPackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
- script: | 
    echo ##vso[task.setvariable variable=version]$(major).$(minor).$(patch)
  name: 'SettingNugetPackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
- script: | 
    echo ##vso[task.setvariable variable=version]$(major).$(minor).$(patch)-ignore
  name: 'SettingOtherBranchNugetPackageVersion'
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'),ne(variables['Build.SourceBranch'], 'refs/heads/develop'))


#Task group has not been exported, task groups are not supported yet

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.3.0'


- task: NuGetCommand@2
  displayName: 'NuGet restore Xbim.Geometry.Engine.sln'
  inputs:
    restoreSolution: 'Xbim.Geometry.Engine.sln'
    feedsToUse: config
    nugetConfigPath: nuget.config


- task: VSBuild@1
  displayName: 'Build solution Xbim.Geometry.Engine.sln'
  inputs:
    solution: 'Xbim.Geometry.Engine.sln'
    msbuildArgs: '/t:build'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

# Delete all Package(s) including newly built - we're going to regenerate with the current build version
# We need to msbuild pack to complete however before we can run 'dotnet pack' on Geometry Engine
- task: DeleteFiles@1
  displayName: 'Delete old *.nupkg files from $(build.sourcesdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**\*.nupkg'


# Pack GeometryEngine.Interop
- script: dotnet pack Xbim.Geometry.Engine.Interop/Xbim.Geometry.Engine.Interop.csproj -c $(BuildConfiguration) -o $(Build.BinariesDirectory) /p:PackageVersion=$(version)
  name: 'Geometry_Interop_Pack'

# Pack ModelGeometry.Scene
- script: dotnet pack Xbim.ModelGeometry.Scene/Xbim.ModelGeometry.Scene.csproj -c $(BuildConfiguration) -o $(Build.BinariesDirectory) /p:PackageVersion=$(version)
  name: 'ModelScene_Pack'

# - task: VSTest@2
#   displayName: 'VsTest - testAssemblies'
#   inputs:
#     testAssemblyVer2: |
#      **\bin\$(BuildConfiguration)\**\Xbim.Geometry.Engine.Interop.Tests.dll
#     codeCoverageEnabled: true
#     platform: '$(BuildPlatform)'
#     configuration: '$(BuildConfiguration)'
#   continueOnError: true

- task: PublishSymbols@1
  displayName: 'Publish symbols path: '
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
  enabled: false
  continueOnError: true

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

# Publish to master or develop MyGet feed based on the source branch
- task: NuGetCommand@2
  name: 'MyGetPublishing_Master'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetMaster'
    versioningScheme: byEnvVar
    versionEnvVar: version

- task: NuGetCommand@2
  name: 'MyGetPublishing_Develop'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetDev'
    versioningScheme: byEnvVar
    versionEnvVar: version

# - task: PublishBuildArtifacts@1
#   displayName: 'publish artifacts'